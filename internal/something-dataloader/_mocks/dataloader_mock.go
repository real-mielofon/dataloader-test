// Code generated by MockGen. DO NOT EDIT.
// Source: ./../dataloader.go
//
// Generated by this command:
//
//	mockgen -source=./../dataloader.go -destination=./dataloader_mock.go -package=_mocks
//

// Package _mocks is a generated GoMock package.
package _mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/real-mielofon/dataloader-test/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetSomething mocks base method.
func (m *Mockclient) GetSomething(ctx context.Context, ids []int64) ([]model.Something, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSomething", ctx, ids)
	ret0, _ := ret[0].([]model.Something)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSomething indicates an expected call of GetSomething.
func (mr *MockclientMockRecorder) GetSomething(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSomething", reflect.TypeOf((*Mockclient)(nil).GetSomething), ctx, ids)
}
